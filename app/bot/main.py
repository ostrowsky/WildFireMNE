import os
import re
import time
from typing import Optional, Tuple

from aiogram import Bot, Dispatcher, F, Router
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode, ContentType, ChatType
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import (
    Message, ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton
)

from app.bot.storage import (
    init_db,
    save_event,           # (type, user_id, username, lat, lon, ts, text, photo_file_id)
    delete_event,
    save_live_start,      # (user_id, username, lat, lon, ts, live_until)
    save_live_update,     # (user_id, lat, lon, ts)
    stop_live             # (user_id)
)

BASE_URL = os.getenv("BASE_URL", "http://localhost:8000").rstrip("/")
TOKEN = os.getenv("TELEGRAM_TOKEN", "")

# aiogram 3.7+: parse_mode —á–µ—Ä–µ–∑ DefaultBotProperties
bot = Bot(TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
router = Router()
dp.include_router(router)

# ---------------- UI ----------------

def main_menu_kbd() -> ReplyKeyboardMarkup:
    # 4 –∫–Ω–æ–ø–∫–∏ –∫–∞–∫ –≤—ã —Ç—Ä–µ–±–æ–≤–∞–ª–∏
    kb = [
        [KeyboardButton(text="üìç Send my location", request_location=True)],
        [KeyboardButton(text="üü¢ Share live location")],
        [KeyboardButton(text="üî• Report fire")],
        [KeyboardButton(text="üåç Open live map")],
    ]
    return ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True, one_time_keyboard=False)

def map_button(uid: int, sig: str) -> InlineKeyboardMarkup:
    url = f"{BASE_URL}/?uid={uid}&sig={sig}"
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üåç Open live map", url=url)]
    ])

def pick_button(uid: int, sig: str) -> InlineKeyboardMarkup:
    url = f"{BASE_URL}/pick?uid={uid}&sig={sig}"
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìå Open picker", url=url)]
    ])

# ---------------- FSM ----------------

class AddFire(StatesGroup):
    awaiting_coords = State()
    awaiting_optional_media = State()

# ---------------- HELPERS ----------------

def sign(uid: int) -> str:
    # –ø—Ä–æ—Å—Ç–∞—è –ø–æ–¥–ø–∏—Å—å ‚Äî –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è read-only –æ–ø–µ—Ä–∞—Ü–∏–π —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Ç–æ—á–µ–∫
    # (—Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –≤–∞—à–∏–º —Å–µ—Ä–≤–µ—Ä–Ω—ã–º –ø—Ä–æ–≤–µ—Ä—è—é—â–∏–º –∫–æ–¥–æ–º)
    import hashlib
    secret = os.getenv("SECRET_KEY", "dev")
    return hashlib.sha256(f"{uid}:{secret}".encode()).hexdigest()

def parse_coords(text: str) -> Optional[Tuple[float, float]]:
    m = re.search(r"(-?\d+(?:\.\d+)?)[,;\s]+(-?\d+(?:\.\d+)?)", text)
    if not m:
        return None
    lat = float(m.group(1)); lon = float(m.group(2))
    if not (-90 <= lat <= 90 and -180 <= lon <= 180):
        return None
    return lat, lon

def username_link(m: Message) -> str:
    if m.from_user is None:
        return ""
    if m.from_user.username:
        return f"@{m.from_user.username}"
    return m.from_user.full_name or ""

# ---------------- HANDLERS ----------------

@router.message(CommandStart(), F.chat.type.in_({ChatType.PRIVATE}))
async def on_start(msg: Message, state: FSMContext):
    await state.clear()
    await msg.answer(
        "Hi! Choose an action:",
        reply_markup=main_menu_kbd()
    )
    # –¥–∞—ë–º –∫–Ω–æ–ø–∫—É ¬´–û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É¬ª –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º (—Å–æ —Å—Å—ã–ª–∫–æ–π —Å uid/sig)
    uid = msg.from_user.id
    await msg.answer(
        "Open the live map:",
        reply_markup=map_button(uid, sign(uid))
    )

# 1) –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è —Ç–µ–∫—É—â–∞—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è ‚Äî —Å–æ–∑–¥–∞—ë–º ¬´volunteer¬ª
@router.message(F.content_type == ContentType.LOCATION, F.location.live_period == None)
async def on_location(msg: Message):
    if not msg.location:
        return
    uid = msg.from_user.id
    username = username_link(msg)
    lat = msg.location.latitude
    lon = msg.location.longitude
    ts = int(time.time())

    save_event(
        type="volunteer",
        user_id=uid,
        username=username,
        lat=lat, lon=lon,
        ts=ts,
        text=None,
        photo_file_id=None
    )

    await msg.answer(
        "Location received and added to the map ‚úÖ",
        reply_markup=main_menu_kbd()
    )
    # –¥—É–±–ª–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞—Ä—Ç—É
    await msg.answer("Open the live map:", reply_markup=map_button(uid, sign(uid)))

# 2) –ª–∞–π–≤‚Äë–ª–æ–∫–∞—Ü–∏—è ‚Äî —Å—Ç–∞—Ä—Ç
@router.message(F.content_type == ContentType.LOCATION, F.location.live_period.as_('lp'))
async def on_live_start(msg: Message, lp: int):
    # Telegram –ø—Ä–∏—Å—ã–ª–∞–µ—Ç –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å location –∏ live_period > 0 ‚Äî —ç—Ç–æ —Å—Ç–∞—Ä—Ç –ª–∞–π–≤–∞
    uid = msg.from_user.id
    username = username_link(msg)
    lat = msg.location.latitude
    lon = msg.location.longitude
    ts = int(time.time())
    live_until = ts + int(lp or 0)

    save_live_start(uid=uid, username=username, lat=lat, lon=lon, ts=ts, live_until=live_until)

    await msg.answer(
        "Live location started üü¢ ‚Äî tracking on the map.",
        reply_markup=main_menu_kbd()
    )
    await msg.answer("Open the live map:", reply_markup=map_button(uid, sign(uid)))

# 2b) –ª–∞–π–≤‚Äë–ª–æ–∫–∞—Ü–∏—è ‚Äî –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏—Ö–æ–¥—è—Ç –∫–∞–∫ edited_message —Å –Ω–æ–≤—ã–º location
@router.edited_message(F.content_type == ContentType.LOCATION)
async def on_live_update(msg: Message):
    if not msg.location:
        return
    uid = msg.from_user.id
    lat = msg.location.latitude
    lon = msg.location.longitude
    ts = int(time.time())
    save_live_update(uid=uid, lat=lat, lon=lon, ts=ts)

# 2c) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Å—Ç–∞–Ω–æ–≤–∏–ª live ‚Äî Telegram –ø—Ä–∏—à–ª—ë—Ç —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ live_period,
#     –Ω–æ —Ç–æ—á–∫–∏ –±–æ–ª—å—à–µ –Ω–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è. –î–æ–±–∞–≤–∏–º –∫–æ–º–∞–Ω–¥—É‚Äë–∫–Ω–æ–ø–∫—É –¥–ª—è —è–≤–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ (–ø–æ –∂–µ–ª–∞–Ω–∏—é).
@router.message(F.text == "üü¢ Share live location")
async def explain_live(msg: Message):
    await msg.answer(
        "To share <b>Live Location</b>:\n"
        "‚Ä¢ Tap the üìé (attach) ‚Üí Location ‚Üí <b>Share live location</b>\n"
        "I will keep tracking updates automatically.",
        reply_markup=main_menu_kbd()
    )

# 3) Report fire ‚Äî –≤–µ–¥—ë–º –≤ –ø–∏–∫–µ—Ä —Å –±—É–ª–∞–≤–∫–æ–π; –ø–æ—Å–ª–µ ‚Äî –ø—Ä–∏–Ω–∏–º–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã/–º–µ–¥–∏–∞
@router.message(F.text == "üî• Report fire")
async def report_fire(msg: Message, state: FSMContext):
    await state.set_state(AddFire.awaiting_coords)
    uid = msg.from_user.id
    await msg.answer(
        "Choose the location on the picker and paste coordinates here, "
        "or just send your current location.",
        reply_markup=pick_button(uid, sign(uid))
    )

@router.message(AddFire.awaiting_coords, F.content_type == ContentType.LOCATION)
async def fire_coords_from_location(msg: Message, state: FSMContext):
    lat = msg.location.latitude
    lon = msg.location.longitude
    await state.update_data(coords=(lat, lon))
    await state.set_state(AddFire.awaiting_optional_media)
    await msg.answer("Got coordinates. Now send a photo and/or text (optional), or send ‚ÄúOK‚Äù to finish.")

@router.message(AddFire.awaiting_coords, F.text)
async def fire_coords_from_text(msg: Message, state: FSMContext):
    pts = parse_coords(msg.text or "")
    if not pts:
        await msg.answer("Send coordinates like: <code>42.179000, 18.942000</code> "
                         "or share location.")
        return
    await state.update_data(coords=pts)
    await state.set_state(AddFire.awaiting_optional_media)
    await msg.answer("Got coordinates. Now send a photo and/or text (optional), or send ‚ÄúOK‚Äù to finish.")

@router.message(AddFire.awaiting_optional_media, F.photo | F.text)
async def fire_finish(msg: Message, state: FSMContext):
    data = await state.get_data()
    coords = data.get("coords")
    if not coords:
        await state.clear()
        await msg.answer("Cancelled.", reply_markup=main_menu_kbd())
        return

    lat, lon = coords
    uid = msg.from_user.id
    username = username_link(msg)
    ts = int(time.time())
    text = None
    file_id = None

    if msg.photo:
        # –±–µ—Ä—ë–º —Å–∞–º—É—é –∫—Ä—É–ø–Ω—É—é
        file_id = msg.photo[-1].file_id
        if msg.caption:
            text = msg.caption
    elif msg.text and msg.text.lower() != "ok":
        text = msg.text

    save_event(
        type="fire",
        user_id=uid,
        username=username,
        lat=lat, lon=lon,
        ts=ts,
        text=text,
        photo_file_id=file_id
    )
    await state.clear()
    await msg.answer("Fire point added üî•‚úÖ", reply_markup=main_menu_kbd())
    await msg.answer("Open the live map:", reply_markup=map_button(uid, sign(uid)))

# 4) –æ—Ç–∫—Ä—ã—Ç—å –∫–∞—Ä—Ç—É (–æ–±—ã—á–Ω–∞—è, —Å —Ç–∞–π–ª–∞–º–∏)
@router.message(F.text == "üåç Open live map")
async def open_map(msg: Message):
    uid = msg.from_user.id
    await msg.answer("Open the live map:", reply_markup=map_button(uid, sign(uid)))

# –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: —É–¥–∞–ª–µ–Ω–∏–µ —Å–≤–æ–µ–π —Ç–æ—á–∫–∏ –ø–æ id (–∞–¥—Ä–µ—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∏–¥—ë—Ç —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã –∫–∞—Ä—Ç—ã –ø–æ /event/:id)
@router.message(F.text.regexp(r"^/delete\s+\d+$"))
async def cmd_delete(msg: Message):
    m = re.search(r"^/delete\s+(\d+)$", msg.text.strip())
    if not m:
        return
    point_id = int(m.group(1))
    deleted = delete_event(point_id, msg.from_user.id)
    await msg.answer("Deleted ‚úÖ" if deleted else "Not found / not yours")

# ---------------- BOOT ----------------

def app_factory():
    # –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ asgi/uvicorn
    init_db()
    return dp

# —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å Procfile: uvicorn app.bot.main:app
app = app_factory()
